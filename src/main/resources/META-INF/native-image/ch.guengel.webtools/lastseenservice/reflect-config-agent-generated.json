[
  {
    "name": "[Lcom.zaxxer.hikari.util.ConcurrentBag$IConcurrentBagEntry;"
  },
  {
    "name": "[Ljava.sql.Statement;"
  },
  {
    "name": "[Lliquibase.pro.packaged.bW;"
  },
  {
    "name": "ch.guengel.webtools.dao.Client",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.jetbrains.exposed.dao.id.EntityID"
        ]
      }
    ]
  },
  {
    "name": "ch.guengel.webtools.dao.Seen",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.jetbrains.exposed.dao.id.EntityID"
        ]
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.encoder.PatternLayoutEncoder",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.DateConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LevelConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LineSeparatorConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LoggerConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.MessageConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.ThreadConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.ConsoleAppender",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.OutputStreamAppender",
    "methods": [
      {
        "name": "setEncoder",
        "parameterTypes": [
          "ch.qos.logback.core.encoder.Encoder"
        ]
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.encoder.LayoutWrappingEncoder",
    "methods": [
      {
        "name": "setParent",
        "parameterTypes": [
          "ch.qos.logback.core.spi.ContextAware"
        ]
      }
    ]
  },
  {
    "name": "ch.qos.logback.core.pattern.PatternLayoutEncoderBase",
    "methods": [
      {
        "name": "setPattern",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "com.datical.liquibase.ext.appdba.markunused.change.MarkUnsedChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.appdba.synonym.change.CreateSynonymChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.appdba.synonym.change.DropSynonymChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.license.LicenseValidationChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.checkconstraint.change.AddCheckConstraintChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.checkconstraint.change.DisableCheckConstraintChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.checkconstraint.change.DropCheckConstraintChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.checkconstraint.change.EnableCheckConstraintChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.databasepackage.change.CreatePackageBodyChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.databasepackage.change.CreatePackageChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.databasepackage.change.DropPackageBodyChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.databasepackage.change.DropPackageChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.function.change.CreateFunctionChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.function.change.DropFunctionChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.trigger.change.CreateTriggerChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.trigger.change.DisableTriggerChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.trigger.change.DropTriggerChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.trigger.change.EnableTriggerChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.datical.liquibase.ext.storedlogic.trigger.change.RenameTriggerChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "com.google.common.util.concurrent.AbstractFuture",
    "fields": [
      {
        "name": "listeners"
      },
      {
        "name": "value"
      },
      {
        "name": "waiters"
      }
    ]
  },
  {
    "name": "com.google.common.util.concurrent.AbstractFuture$Waiter",
    "fields": [
      {
        "name": "next"
      },
      {
        "name": "thread"
      }
    ]
  },
  {
    "name": "com.google.protobuf.ExtensionRegistry",
    "methods": [
      {
        "name": "getEmptyRegistry",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.intellij.rt.execution.application.AppMainV2$Agent",
    "methods": [
      {
        "name": "premain",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.instrument.Instrumentation"
        ]
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.HmacCore$HmacSHA256",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.PBKDF2Core$HmacSHA256",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.zaxxer.hikari.HikariConfig",
    "allDeclaredFields": true
  },
  {
    "name": "io.grpc.netty.AbstractNettyHandler",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.grpc.netty.NettyServer$1"
  },
  {
    "name": "io.grpc.netty.NettyServerHandler",
    "queriedMethods": [
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.grpc.netty.ProtocolNegotiators$GrpcNegotiationHandler",
    "queriedMethods": [
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler",
    "queriedMethods": [
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.grpc.netty.ProtocolNegotiators$WaitUntilActiveHandler",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.grpc.netty.WriteBufferingAndExceptionHandler",
    "queriedMethods": [
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.bootstrap.ServerBootstrap$1"
  },
  {
    "name": "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor",
    "queriedMethods": [
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.buffer.AbstractByteBufAllocator",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.netty.buffer.AbstractReferenceCountedByteBuf",
    "fields": [
      {
        "name": "refCnt"
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelDuplexHandler",
    "queriedMethods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelInboundHandlerAdapter",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelInitializer",
    "queriedMethods": [
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelPipeline$HeadContext",
    "queriedMethods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelPipeline$TailContext",
    "queriedMethods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.ByteToMessageDecoder",
    "queriedMethods": [
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.http2.Http2ConnectionHandler",
    "queriedMethods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.netty.util.AbstractReferenceCounted",
    "fields": [
      {
        "name": "refCnt"
      }
    ]
  },
  {
    "name": "io.netty.util.ReferenceCountUtil",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "java.beans.PropertyVetoException"
  },
  {
    "name": "java.io.FilePermission"
  },
  {
    "name": "java.lang.Comparable",
    "allDeclaredFields": true,
    "allDeclaredClasses": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.lang.Object",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.RuntimePermission"
  },
  {
    "name": "java.lang.String"
  },
  {
    "name": "java.lang.Throwable",
    "methods": [
      {
        "name": "getSuppressed",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.management.ManagementFactory",
    "methods": [
      {
        "name": "getRuntimeMXBean",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.management.RuntimeMXBean",
    "methods": [
      {
        "name": "getInputArguments",
        "parameterTypes": []
      },
      {
        "name": "getName",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.reflect.Executable",
    "methods": [
      {
        "name": "getParameters",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.reflect.Method"
  },
  {
    "name": "java.lang.reflect.Parameter",
    "methods": [
      {
        "name": "getName",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.net.NetPermission"
  },
  {
    "name": "java.net.SocketPermission"
  },
  {
    "name": "java.net.URLPermission",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.nio.Bits",
    "fields": [
      {
        "name": "UNALIGNED"
      }
    ]
  },
  {
    "name": "java.nio.Buffer",
    "fields": [
      {
        "name": "address"
      }
    ]
  },
  {
    "name": "java.nio.ByteBuffer",
    "queriedMethods": [
      {
        "name": "alignedSlice",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "java.nio.DirectByteBuffer",
    "queriedMethods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "long",
          "int"
        ]
      }
    ]
  },
  {
    "name": "java.security.AllPermission"
  },
  {
    "name": "java.security.MessageDigestSpi"
  },
  {
    "name": "java.security.SecureRandomParameters"
  },
  {
    "name": "java.security.SecurityPermission"
  },
  {
    "name": "java.sql.Date"
  },
  {
    "name": "java.sql.ResultSet"
  },
  {
    "name": "java.sql.Timestamp"
  },
  {
    "name": "java.time.LocalDateTime"
  },
  {
    "name": "java.util.ArrayList",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.util.PropertyPermission"
  },
  {
    "name": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "methods": [
      {
        "name": "setRemoveOnCancelPolicy",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "java.util.concurrent.atomic.LongAdder",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "add",
        "parameterTypes": [
          "long"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "sum",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "javax.management.ObjectName"
  },
  {
    "name": "jdk.internal.misc.Unsafe",
    "methods": [
      {
        "name": "getUnsafe",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlin.Metadata",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "bv",
        "parameterTypes": []
      },
      {
        "name": "d1",
        "parameterTypes": []
      },
      {
        "name": "d2",
        "parameterTypes": []
      },
      {
        "name": "k",
        "parameterTypes": []
      },
      {
        "name": "mv",
        "parameterTypes": []
      },
      {
        "name": "pn",
        "parameterTypes": []
      },
      {
        "name": "xi",
        "parameterTypes": []
      },
      {
        "name": "xs",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlin.Unit"
  },
  {
    "name": "kotlin.internal.jdk8.JDK8PlatformImplementations",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlin.jvm.functions.Function0"
  },
  {
    "name": "kotlin.jvm.internal.DefaultConstructorMarker"
  },
  {
    "name": "kotlin.reflect.jvm.internal.ReflectionFactoryImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "kotlin.reflect.jvm.internal.impl.resolve.scopes.DescriptorKindFilter",
    "allPublicFields": true
  },
  {
    "name": "liquibase.AbstractExtensibleObject",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.AbstractChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.AbstractSQLChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.AbstractTableChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.AddColumnConfig",
    "allDeclaredFields": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.change.ChangeFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.change.ColumnConfig",
    "allDeclaredFields": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.change.ConstraintsConfig",
    "allDeclaredFields": true
  },
  {
    "name": "liquibase.change.core.AbstractModifyDataChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.AddAutoIncrementChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.AddColumnChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.AddDefaultValueChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.AddForeignKeyConstraintChange",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "getBaseColumnNames",
        "parameterTypes": []
      },
      {
        "name": "getBaseTableCatalogName",
        "parameterTypes": []
      },
      {
        "name": "getBaseTableName",
        "parameterTypes": []
      },
      {
        "name": "getBaseTableSchemaName",
        "parameterTypes": []
      },
      {
        "name": "getConstraintName",
        "parameterTypes": []
      },
      {
        "name": "getDeferrable",
        "parameterTypes": []
      },
      {
        "name": "getDeleteCascade",
        "parameterTypes": []
      },
      {
        "name": "getInitiallyDeferred",
        "parameterTypes": []
      },
      {
        "name": "getOnDelete",
        "parameterTypes": []
      },
      {
        "name": "getOnUpdate",
        "parameterTypes": []
      },
      {
        "name": "getReferencedColumnNames",
        "parameterTypes": []
      },
      {
        "name": "getReferencedTableCatalogName",
        "parameterTypes": []
      },
      {
        "name": "getReferencedTableName",
        "parameterTypes": []
      },
      {
        "name": "getReferencedTableSchemaName",
        "parameterTypes": []
      },
      {
        "name": "getReferencesUniqueColumn",
        "parameterTypes": []
      },
      {
        "name": "getValidate",
        "parameterTypes": []
      },
      {
        "name": "setBaseColumnNames",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setBaseTableName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setConstraintName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setOnDelete",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setOnUpdate",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setReferencedColumnNames",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setReferencedTableName",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "liquibase.change.core.AddLookupTableChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.AddNotNullConstraintChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.AddPrimaryKeyChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.AddUniqueConstraintChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.AlterSequenceChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.CreateIndexChange",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "getCatalogName",
        "parameterTypes": []
      },
      {
        "name": "getClustered",
        "parameterTypes": []
      },
      {
        "name": "getColumns",
        "parameterTypes": []
      },
      {
        "name": "getIndexName",
        "parameterTypes": []
      },
      {
        "name": "getSchemaName",
        "parameterTypes": []
      },
      {
        "name": "getTableName",
        "parameterTypes": []
      },
      {
        "name": "getTablespace",
        "parameterTypes": []
      },
      {
        "name": "isUnique",
        "parameterTypes": []
      },
      {
        "name": "setIndexName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setTableName",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "liquibase.change.core.CreateProcedureChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.CreateSequenceChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.CreateTableChange",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "getCatalogName",
        "parameterTypes": []
      },
      {
        "name": "getColumns",
        "parameterTypes": []
      },
      {
        "name": "getRemarks",
        "parameterTypes": []
      },
      {
        "name": "getSchemaName",
        "parameterTypes": []
      },
      {
        "name": "getTableName",
        "parameterTypes": []
      },
      {
        "name": "getTablespace",
        "parameterTypes": []
      },
      {
        "name": "setTableName",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "liquibase.change.core.CreateViewChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DeleteDataChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropAllForeignKeyConstraintsChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropColumnChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropDefaultValueChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropForeignKeyConstraintChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropIndexChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropNotNullConstraintChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropPrimaryKeyChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropProcedureChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropSequenceChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropTableChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropUniqueConstraintChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.DropViewChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.EmptyChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.ExecuteShellCommandChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.InsertDataChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.LoadDataChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.LoadUpdateDataChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.MergeColumnChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.ModifyDataTypeChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.OutputChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.RawSQLChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.RenameColumnChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.RenameSequenceChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.RenameTableChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.RenameViewChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.SQLFileChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.SetColumnRemarksChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.SetTableRemarksChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.StopChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.TagDatabaseChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.core.UpdateDataChange",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.change.custom.CustomChangeWrapper",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.changelog.StandardChangeLogHistoryService",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.configuration.LiquibaseConfiguration",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.database.core.PostgresDatabase",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.datatype.core.BooleanType",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.datatype.core.VarcharType",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.executor.ExecutorService",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.executor.jvm.JdbcExecutor",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.hub.HubServiceFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.license.LicenseServiceFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.lockservice.StandardLockService",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.logging.core.LogServiceFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.plugin.AbstractPlugin",
    "queryAllPublicMethods": true
  },
  {
    "name": "liquibase.pro.packaged.gy",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.pro.packaged.mt",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "liquibase.serializer.AbstractLiquibaseSerializable",
    "allDeclaredFields": true
  },
  {
    "name": "org.jetbrains.exposed.dao.id.EntityID"
  },
  {
    "name": "org.jetbrains.exposed.sql.Column",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.jetbrains.exposed.sql.Table",
          "java.lang.String",
          "org.jetbrains.exposed.sql.IColumnType"
        ]
      },
      {
        "name": "getDbDefaultValue$exposed_core",
        "parameterTypes": []
      },
      {
        "name": "getDefaultValueFun",
        "parameterTypes": []
      },
      {
        "name": "getForeignKey",
        "parameterTypes": []
      },
      {
        "name": "getName",
        "parameterTypes": []
      },
      {
        "name": "getTable",
        "parameterTypes": []
      },
      {
        "name": "setDbDefaultValue$exposed_core",
        "parameterTypes": [
          "org.jetbrains.exposed.sql.Expression"
        ]
      },
      {
        "name": "setDefaultValueFun",
        "parameterTypes": [
          "kotlin.jvm.functions.Function0"
        ]
      },
      {
        "name": "setForeignKey",
        "parameterTypes": [
          "org.jetbrains.exposed.sql.ForeignKeyConstraint"
        ]
      }
    ]
  },
  {
    "name": "org.jetbrains.exposed.sql.ColumnDiff"
  },
  {
    "name": "org.jetbrains.exposed.sql.ColumnType",
    "methods": [
      {
        "name": "getNullable",
        "parameterTypes": []
      },
      {
        "name": "setNullable",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.jetbrains.exposed.sql.DdlAware"
  },
  {
    "name": "org.jetbrains.exposed.sql.Expression"
  },
  {
    "name": "org.jetbrains.exposed.sql.ExpressionWithColumnType"
  },
  {
    "name": "org.jetbrains.exposed.sql.ForeignKeyConstraint"
  },
  {
    "name": "org.jetbrains.exposed.sql.IColumnType"
  },
  {
    "name": "org.jetbrains.exposed.sql.IntegerColumnType",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.jetbrains.exposed.sql.QueryBuilder"
  },
  {
    "name": "org.jetbrains.exposed.sql.Table"
  },
  {
    "name": "org.jetbrains.exposed.sql.statements.api.PreparedStatementApi"
  },
  {
    "name": "org.postgresql.Driver"
  },
  {
    "name": "org.postgresql.PGProperty",
    "fields": [
      {
        "name": "ADAPTIVE_FETCH"
      },
      {
        "name": "ADAPTIVE_FETCH_MAXIMUM"
      },
      {
        "name": "ADAPTIVE_FETCH_MINIMUM"
      },
      {
        "name": "ALLOW_ENCODING_CHANGES"
      },
      {
        "name": "APPLICATION_NAME"
      },
      {
        "name": "ASSUME_MIN_SERVER_VERSION"
      },
      {
        "name": "AUTHENTICATION_PLUGIN_CLASS_NAME"
      },
      {
        "name": "AUTOSAVE"
      },
      {
        "name": "BINARY_TRANSFER"
      },
      {
        "name": "BINARY_TRANSFER_DISABLE"
      },
      {
        "name": "BINARY_TRANSFER_ENABLE"
      },
      {
        "name": "CANCEL_SIGNAL_TIMEOUT"
      },
      {
        "name": "CLEANUP_SAVEPOINTS"
      },
      {
        "name": "CONNECT_TIMEOUT"
      },
      {
        "name": "CURRENT_SCHEMA"
      },
      {
        "name": "DATABASE_METADATA_CACHE_FIELDS"
      },
      {
        "name": "DATABASE_METADATA_CACHE_FIELDS_MIB"
      },
      {
        "name": "DEFAULT_ROW_FETCH_SIZE"
      },
      {
        "name": "DISABLE_COLUMN_SANITISER"
      },
      {
        "name": "ESCAPE_SYNTAX_CALL_MODE"
      },
      {
        "name": "GSS_ENC_MODE"
      },
      {
        "name": "GSS_LIB"
      },
      {
        "name": "HIDE_UNPRIVILEGED_OBJECTS"
      },
      {
        "name": "HOST_RECHECK_SECONDS"
      },
      {
        "name": "JAAS_APPLICATION_NAME"
      },
      {
        "name": "JAAS_LOGIN"
      },
      {
        "name": "KERBEROS_SERVER_NAME"
      },
      {
        "name": "LOAD_BALANCE_HOSTS"
      },
      {
        "name": "LOGGER_FILE"
      },
      {
        "name": "LOGGER_LEVEL"
      },
      {
        "name": "LOGIN_TIMEOUT"
      },
      {
        "name": "LOG_SERVER_ERROR_DETAIL"
      },
      {
        "name": "LOG_UNCLOSED_CONNECTIONS"
      },
      {
        "name": "MAX_RESULT_BUFFER"
      },
      {
        "name": "OPTIONS"
      },
      {
        "name": "PASSWORD"
      },
      {
        "name": "PG_DBNAME"
      },
      {
        "name": "PG_HOST"
      },
      {
        "name": "PG_PORT"
      },
      {
        "name": "PREFER_QUERY_MODE"
      },
      {
        "name": "PREPARED_STATEMENT_CACHE_QUERIES"
      },
      {
        "name": "PREPARED_STATEMENT_CACHE_SIZE_MIB"
      },
      {
        "name": "PREPARE_THRESHOLD"
      },
      {
        "name": "PROTOCOL_VERSION"
      },
      {
        "name": "QUOTE_RETURNING_IDENTIFIERS"
      },
      {
        "name": "READ_ONLY"
      },
      {
        "name": "READ_ONLY_MODE"
      },
      {
        "name": "RECEIVE_BUFFER_SIZE"
      },
      {
        "name": "REPLICATION"
      },
      {
        "name": "REWRITE_BATCHED_INSERTS"
      },
      {
        "name": "SEND_BUFFER_SIZE"
      },
      {
        "name": "SERVICE"
      },
      {
        "name": "SOCKET_FACTORY"
      },
      {
        "name": "SOCKET_FACTORY_ARG"
      },
      {
        "name": "SOCKET_TIMEOUT"
      },
      {
        "name": "SSL"
      },
      {
        "name": "SSL_CERT"
      },
      {
        "name": "SSL_FACTORY"
      },
      {
        "name": "SSL_FACTORY_ARG"
      },
      {
        "name": "SSL_HOSTNAME_VERIFIER"
      },
      {
        "name": "SSL_KEY"
      },
      {
        "name": "SSL_MODE"
      },
      {
        "name": "SSL_PASSWORD"
      },
      {
        "name": "SSL_PASSWORD_CALLBACK"
      },
      {
        "name": "SSL_ROOT_CERT"
      },
      {
        "name": "SSPI_SERVICE_CLASS"
      },
      {
        "name": "STRING_TYPE"
      },
      {
        "name": "TARGET_SERVER_TYPE"
      },
      {
        "name": "TCP_KEEP_ALIVE"
      },
      {
        "name": "TCP_NO_DELAY"
      },
      {
        "name": "UNKNOWN_LENGTH"
      },
      {
        "name": "USER"
      },
      {
        "name": "USE_SPNEGO"
      },
      {
        "name": "XML_FACTORY_FACTORY"
      }
    ]
  },
  {
    "name": "sun.misc.Unsafe",
    "allDeclaredFields": true,
    "methods": [
      {
        "name": "invokeCleaner",
        "parameterTypes": [
          "java.nio.ByteBuffer"
        ]
      }
    ],
    "queriedMethods": [
      {
        "name": "arrayBaseOffset",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "arrayIndexScale",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "copyMemory",
        "parameterTypes": [
          "long",
          "long",
          "long"
        ]
      },
      {
        "name": "copyMemory",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "getAndAddLong",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "getAndSetObject",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      },
      {
        "name": "getBoolean",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "getByte",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "getByte",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "getDouble",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "getFloat",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "getInt",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "getInt",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "getLong",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "getLong",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "getObject",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "objectFieldOffset",
        "parameterTypes": [
          "java.lang.reflect.Field"
        ]
      },
      {
        "name": "putBoolean",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "boolean"
        ]
      },
      {
        "name": "putByte",
        "parameterTypes": [
          "long",
          "byte"
        ]
      },
      {
        "name": "putByte",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "byte"
        ]
      },
      {
        "name": "putDouble",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "double"
        ]
      },
      {
        "name": "putFloat",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "float"
        ]
      },
      {
        "name": "putInt",
        "parameterTypes": [
          "long",
          "int"
        ]
      },
      {
        "name": "putInt",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "int"
        ]
      },
      {
        "name": "putLong",
        "parameterTypes": [
          "long",
          "long"
        ]
      },
      {
        "name": "putLong",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "putObject",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.nio.ch.SelectorImpl",
    "fields": [
      {
        "name": "publicSelectedKeys"
      },
      {
        "name": "selectedKeys"
      }
    ]
  },
  {
    "name": "sun.security.provider.MD5",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.NativePRNG",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA2$SHA256",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  }
]
